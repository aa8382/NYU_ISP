"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...

    if create:
        try:    
            if self.Afn in listfiles():
                self.Validfile = openfile(self.Afn,False)
                self.Backupfile = openfile(self.Bfn,True)
                content = self.Validfile.readat(None,0)
                self.Backupfile.writeat(content,0)
            else:
                self.Validfile = openfile(self.Afn,True)
                self.Backupfile = openfile(self.Bfn,True)
                self.Validfile.writeat('SE',0)
                self.Backupfile.writeat('SE',0)
        except:
            return

    else:
        try:
            self.Validfile = openfile(self.Afn,False)    
            self.Backupfile = openfile(self.Bfn,True)
            content = self.Validfile.readat(None,0)
            self.Backupfile.writeat(content,0)

        except:
            return

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    try:
        self.Backupfile.writeat(data,offset)
    except:
        return

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try:
        return self.Validfile.readat(bytes,offset)
    except:
        pass

  def close(self):
    try:    
        filecontent = self.Backupfile.readat(None,0)
        if self.validContent(filecontent):
            self.Validfile.writeat(filecontent,0)
        
        self.Validfile.close()
        self.Backupfile.close()
    except(FileClosedError):
        return

  def validContent(self, filecontent):
    if filecontent[0]=='S' and filecontent[-1]=='E':
        return True
    else:
        return False

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()